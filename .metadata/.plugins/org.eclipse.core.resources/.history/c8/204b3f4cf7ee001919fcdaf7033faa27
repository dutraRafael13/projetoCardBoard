package br.com.cardboard.transportadoraAPI.calcular.melhor.transportadora;

import java.util.List;
import java.util.Map;
import java.util.TreeMap;

import br.com.cardboard.transportadoraAPI.enums.EnumPrioridadeTransporte;
import br.com.cardboard.transportadoraAPI.enums.EnumTipoTransporte;
import br.com.cardboard.transportadoraAPI.models.TransportadoraModel;

public class CalcularMelhorTransportadora {
	
	public String calcula(List<TransportadoraModel> transportadoras, long distancia, EnumPrioridadeTransporte prioridade) {
		String msg = "";
		Map<Integer, Map<Integer, Double>> mapTransportadoras = new TreeMap<>();
		transportadoras.stream().forEach(transportadora -> {
			this.setaMapTransportadoras(mapTransportadoras, distancia, transportadora);
		});
		return msg;
	}
	
	public String calcula(List<TransportadoraModel> transportadoras, long distancia,
			EnumPrioridadeTransporte prioridade, EnumTipoTransporte tipoTransporte) {
		return "";	
	}
	
	private void setaMapTransportadoras(Map<Integer, Map<Integer, Double>> mapTransportadoras, long distancia, TransportadoraModel transportadora) {
		if (!mapTransportadoras.containsKey(transportadora.getCodigoTransportadora())) {
			mapTransportadoras.put(transportadora.getCodigoTransportadora(), new TreeMap<>());
		} 
		mapTransportadoras.get(transportadora.getCodigoTransportadora()).put(EnumPrioridadeTransporte.MENOR_PRECO.getId(), 
					this.calculaPrecoFinalTransportadora(distancia, transportadora.getValor()));
		mapTransportadoras.get(transportadora.getCodigoTransportadora()).put(EnumPrioridadeTransporte.MENOR_TEMPO.getId(),
				this.calculaTempoFinalTransportadora(distancia, transportadora.getTempo()));
	}
	
	private double calculaPrecoFinalTransportadora(long distancia, double valor) {
		return (distancia * valor) / 10;
	}
	
	private double calculaTempoFinalTransportadora(long distancia, int tempo) {
		return distancia * tempo;
	}

}